#!/usr/bin/env python3
"""
FleetDispatcher
---------------
Role:
    The FleetDispatcher is responsible for taking raw telemetry entries
    generated by the Navigator (written into a TelemetryBuffer),
    transforming them into schema-compliant TelemetryPackets, and
    dispatching them into the RxTxBuffer for transmission by the GPSDevice.

Lifecycle semantics:
    - `.on()`   : FleetDispatcher ONSITE
    - `.off()`  : FleetDispatcher OFFSITE
    - Runs in its own thread, draining TelemetryBuffer and writing
      outbound packets into RxTxBuffer.

In the real world:
    This is the equivalent of a dispatcher console: vehicles “report in”
    with telemetry, and FleetDispatcher ensures those reports are cleaned,
    standardized, and handed off to comms for delivery to the depot/server.
"""

import time
import threading
from dataclasses import asdict
from world.vehicle.gps_device.radio_module.packet import make_packet


class FleetDispatcher:
    def __init__(self, vehicle_id, telemetry_buffer, rxtx_buffer, route="0", tick_time: float = 0.1):
        """
        :param vehicle_id:   Vehicle ID string
        :param telemetry_buffer: Source buffer (Navigator output)
        :param rxtx_buffer:  Destination buffer (for transmission)
        :param route:        Route identifier (string)
        :param tick_time:    Dispatch interval in seconds
        """
        self.vehicle_id = vehicle_id
        self.telemetry_buffer = telemetry_buffer
        self.rxtx_buffer = rxtx_buffer
        self.route = route
        self.tick_time = tick_time

        self._running = False
        self._thread = None

    def on(self):
        if not self._running:
            self._running = True
            self._thread = threading.Thread(target=self._worker, daemon=True)
            self._thread.start()
            print(f"[INFO] FleetDispatcher ONSITE for {self.vehicle_id}")

    def off(self):
        self._running = False
        if self._thread:
            self._thread.join(timeout=2)
        print(f"[INFO] FleetDispatcher OFFSITE for {self.vehicle_id}")

    def _worker(self):
        while self._running:
            entry = self.telemetry_buffer.read()
            if entry:
                # Build schema-compliant packet
                pkt = make_packet(
                    device_id=self.vehicle_id,
                    lat=entry["lat"],
                    lon=entry["lon"],
                    speed=entry["speed"],
                    heading=entry["bearing"],
                    route=self.route,
                )
                # Convert dataclass -> dict before writing to RxTxBuffer
                self.rxtx_buffer.write(asdict(pkt))
            time.sleep(self.tick_time)
