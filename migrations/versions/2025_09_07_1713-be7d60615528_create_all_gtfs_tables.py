"""Create all GTFS tables

Revision ID: be7d60615528
Revises: b0f49b445875
Create Date: 2025-09-07 17:13:54.061923

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = 'be7d60615528'
down_revision: Union[str, Sequence[str], None] = 'b0f49b445875'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('countries',
    sa.Column('country_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('iso_code', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('country_id')
    )
    op.create_table('shapes',
    sa.Column('shape_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.PrimaryKeyConstraint('shape_id')
    )
    op.create_index('idx_shapes_geom', 'shapes', ['geom'], unique=False, postgresql_using='gist')
    op.create_table('depots',
    sa.Column('depot_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.PrimaryKeyConstraint('depot_id')
    )
    op.create_index('idx_depots_location', 'depots', ['location'], unique=False, postgresql_using='gist')
    op.create_table('routes',
    sa.Column('route_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('short_name', sa.Text(), nullable=False),
    sa.Column('long_name', sa.Text(), nullable=True),
    sa.Column('parishes', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('valid_from', sa.Date(), server_default=sa.text('CURRENT_DATE'), nullable=True),
    sa.Column('valid_to', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.PrimaryKeyConstraint('route_id')
    )
    op.create_table('services',
    sa.Column('service_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('mon', sa.Boolean(), nullable=False),
    sa.Column('tue', sa.Boolean(), nullable=False),
    sa.Column('wed', sa.Boolean(), nullable=False),
    sa.Column('thu', sa.Boolean(), nullable=False),
    sa.Column('fri', sa.Boolean(), nullable=False),
    sa.Column('sat', sa.Boolean(), nullable=False),
    sa.Column('sun', sa.Boolean(), nullable=False),
    sa.Column('date_start', sa.Date(), nullable=False),
    sa.Column('date_end', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.PrimaryKeyConstraint('service_id')
    )
    op.create_table('stops',
    sa.Column('stop_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('code', sa.Text(), nullable=True),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('zone_id', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.PrimaryKeyConstraint('stop_id')
    )
    op.create_index('idx_stops_location', 'stops', ['location'], unique=False, postgresql_using='gist')
    op.create_table('blocks',
    sa.Column('block_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('service_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], ),
    sa.PrimaryKeyConstraint('block_id')
    )
    op.create_table('drivers',
    sa.Column('driver_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('license_no', sa.Text(), nullable=False),
    sa.Column('home_depot_id', sa.UUID(), nullable=True),
    sa.Column('employment_status', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.ForeignKeyConstraint(['home_depot_id'], ['depots.depot_id'], ),
    sa.PrimaryKeyConstraint('driver_id')
    )
    op.create_table('frequencies',
    sa.Column('frequency_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('service_id', sa.UUID(), nullable=False),
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('headway_s', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], ),
    sa.PrimaryKeyConstraint('frequency_id')
    )
    op.create_table('route_shapes',
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('shape_id', sa.UUID(), nullable=False),
    sa.Column('variant_code', sa.Text(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['shape_id'], ['shapes.shape_id'], ),
    sa.PrimaryKeyConstraint('route_id', 'shape_id')
    )
    op.create_table('vehicles',
    sa.Column('vehicle_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('reg_code', sa.Text(), nullable=False),
    sa.Column('home_depot_id', sa.UUID(), nullable=True),
    sa.Column('preferred_route_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('available', 'in_service', 'maintenance', 'retired', name='vehiclestatusenum'), nullable=False),
    sa.Column('profile_id', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.ForeignKeyConstraint(['home_depot_id'], ['depots.depot_id'], ),
    sa.ForeignKeyConstraint(['preferred_route_id'], ['routes.route_id'], ),
    sa.PrimaryKeyConstraint('vehicle_id')
    )
    op.create_table('block_breaks',
    sa.Column('break_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('block_id', sa.UUID(), nullable=False),
    sa.Column('break_start', sa.Time(), nullable=False),
    sa.Column('break_end', sa.Time(), nullable=False),
    sa.Column('break_duration', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.PrimaryKeyConstraint('break_id')
    )
    op.create_table('driver_assignments',
    sa.Column('assignment_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('driver_id', sa.UUID(), nullable=False),
    sa.Column('block_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.driver_id'], ),
    sa.PrimaryKeyConstraint('assignment_id')
    )
    op.create_table('timetables',
    sa.Column('timetable_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('departure_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('arrival_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.vehicle_id'], ),
    sa.PrimaryKeyConstraint('timetable_id')
    )
    op.create_table('trips',
    sa.Column('trip_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('service_id', sa.UUID(), nullable=False),
    sa.Column('shape_id', sa.UUID(), nullable=True),
    sa.Column('trip_headsign', sa.Text(), nullable=True),
    sa.Column('direction_id', sa.SmallInteger(), nullable=True),
    sa.Column('block_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], ),
    sa.ForeignKeyConstraint(['shape_id'], ['shapes.shape_id'], ),
    sa.PrimaryKeyConstraint('trip_id')
    )
    op.create_table('vehicle_assignments',
    sa.Column('assignment_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('block_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.vehicle_id'], ),
    sa.PrimaryKeyConstraint('assignment_id')
    )
    op.create_table('vehicle_status_events',
    sa.Column('event_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('available', 'in_service', 'maintenance', 'retired', name='vehiclestatusenum'), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.vehicle_id'], ),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_table('block_trips',
    sa.Column('block_id', sa.UUID(), nullable=False),
    sa.Column('trip_id', sa.UUID(), nullable=False),
    sa.Column('layover_minutes', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], ),
    sa.PrimaryKeyConstraint('block_id', 'trip_id')
    )
    op.create_table('stop_times',
    sa.Column('trip_id', sa.UUID(), nullable=False),
    sa.Column('stop_id', sa.UUID(), nullable=False),
    sa.Column('arrival_time', sa.Time(), nullable=False),
    sa.Column('departure_time', sa.Time(), nullable=False),
    sa.Column('stop_sequence', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['stop_id'], ['stops.stop_id'], ),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], ),
    sa.PrimaryKeyConstraint('trip_id', 'stop_id', 'stop_sequence')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('stop_times')
    op.drop_table('block_trips')
    op.drop_table('vehicle_status_events')
    op.drop_table('vehicle_assignments')
    op.drop_table('trips')
    op.drop_table('timetables')
    op.drop_table('driver_assignments')
    op.drop_table('block_breaks')
    op.drop_table('vehicles')
    op.drop_table('route_shapes')
    op.drop_table('frequencies')
    op.drop_table('drivers')
    op.drop_table('blocks')
    op.drop_index('idx_stops_location', table_name='stops', postgresql_using='gist')
    op.drop_table('stops')
    op.drop_table('services')
    op.drop_table('routes')
    op.drop_index('idx_depots_location', table_name='depots', postgresql_using='gist')
    op.drop_table('depots')
    op.drop_index('idx_shapes_geom', table_name='shapes', postgresql_using='gist')
    op.drop_table('shapes')
    op.drop_table('countries')
    # ### end Alembic commands ###
