"""Add GTFS models

Revision ID: c7738c51930f
Revises: b0f49b445875
Create Date: 2025-09-07 17:06:35.319308

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c7738c51930f'
down_revision: Union[str, Sequence[str], None] = 'b0f49b445875'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('countries',
    sa.Column('country_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('iso_code', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('country_id')
    )
    op.create_table('shapes',
    sa.Column('shape_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.PrimaryKeyConstraint('shape_id')
    )
    op.create_index('idx_shapes_geom', 'shapes', ['geom'], unique=False, postgresql_using='gist')
    op.create_table('depots',
    sa.Column('depot_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.PrimaryKeyConstraint('depot_id')
    )
    op.create_index('idx_depots_location', 'depots', ['location'], unique=False, postgresql_using='gist')
    op.create_table('services',
    sa.Column('service_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('mon', sa.Boolean(), nullable=False),
    sa.Column('tue', sa.Boolean(), nullable=False),
    sa.Column('wed', sa.Boolean(), nullable=False),
    sa.Column('thu', sa.Boolean(), nullable=False),
    sa.Column('fri', sa.Boolean(), nullable=False),
    sa.Column('sat', sa.Boolean(), nullable=False),
    sa.Column('sun', sa.Boolean(), nullable=False),
    sa.Column('date_start', sa.Date(), nullable=False),
    sa.Column('date_end', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.PrimaryKeyConstraint('service_id')
    )
    op.create_table('blocks',
    sa.Column('block_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('service_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], ),
    sa.PrimaryKeyConstraint('block_id')
    )
    op.create_table('drivers',
    sa.Column('driver_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('country_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('license_no', sa.Text(), nullable=False),
    sa.Column('home_depot_id', sa.UUID(), nullable=True),
    sa.Column('employment_status', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.country_id'], ),
    sa.ForeignKeyConstraint(['home_depot_id'], ['depots.depot_id'], ),
    sa.PrimaryKeyConstraint('driver_id')
    )
    op.create_table('frequencies',
    sa.Column('frequency_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('service_id', sa.UUID(), nullable=False),
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('headway_s', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], ),
    sa.PrimaryKeyConstraint('frequency_id')
    )
    op.create_table('route_shapes',
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('shape_id', sa.UUID(), nullable=False),
    sa.Column('variant_code', sa.Text(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['shape_id'], ['shapes.shape_id'], ),
    sa.PrimaryKeyConstraint('route_id', 'shape_id')
    )
    op.create_table('block_breaks',
    sa.Column('break_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('block_id', sa.UUID(), nullable=False),
    sa.Column('break_start', sa.Time(), nullable=False),
    sa.Column('break_end', sa.Time(), nullable=False),
    sa.Column('break_duration', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.PrimaryKeyConstraint('break_id')
    )
    op.create_table('driver_assignments',
    sa.Column('assignment_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('driver_id', sa.UUID(), nullable=False),
    sa.Column('block_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.driver_id'], ),
    sa.PrimaryKeyConstraint('assignment_id')
    )
    op.create_table('trips',
    sa.Column('trip_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('service_id', sa.UUID(), nullable=False),
    sa.Column('shape_id', sa.UUID(), nullable=True),
    sa.Column('trip_headsign', sa.Text(), nullable=True),
    sa.Column('direction_id', sa.SmallInteger(), nullable=True),
    sa.Column('block_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], ),
    sa.ForeignKeyConstraint(['shape_id'], ['shapes.shape_id'], ),
    sa.PrimaryKeyConstraint('trip_id')
    )
    op.create_table('vehicle_assignments',
    sa.Column('assignment_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('block_id', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.vehicle_id'], ),
    sa.PrimaryKeyConstraint('assignment_id')
    )
    op.create_table('vehicle_status_events',
    sa.Column('event_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('available', 'in_service', 'maintenance', 'retired', name='vehiclestatusenum'), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.vehicle_id'], ),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_table('block_trips',
    sa.Column('block_id', sa.UUID(), nullable=False),
    sa.Column('trip_id', sa.UUID(), nullable=False),
    sa.Column('layover_minutes', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.block_id'], ),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], ),
    sa.PrimaryKeyConstraint('block_id', 'trip_id')
    )
    op.create_table('stop_times',
    sa.Column('trip_id', sa.UUID(), nullable=False),
    sa.Column('stop_id', sa.UUID(), nullable=False),
    sa.Column('arrival_time', sa.Time(), nullable=False),
    sa.Column('departure_time', sa.Time(), nullable=False),
    sa.Column('stop_sequence', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['stop_id'], ['stops.stop_id'], ),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], ),
    sa.PrimaryKeyConstraint('trip_id', 'stop_id', 'stop_sequence')
    )
    op.drop_table('route_stops')
    op.add_column('routes', sa.Column('country_id', sa.UUID(), nullable=False))
    op.add_column('routes', sa.Column('short_name', sa.Text(), nullable=False))
    op.add_column('routes', sa.Column('long_name', sa.Text(), nullable=True))
    op.add_column('routes', sa.Column('parishes', sa.Text(), nullable=True))
    op.add_column('routes', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('routes', sa.Column('valid_from', sa.Date(), server_default=sa.text('CURRENT_DATE'), nullable=True))
    op.add_column('routes', sa.Column('valid_to', sa.Date(), nullable=True))
    op.add_column('routes', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('routes', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('routes', 'route_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_index(op.f('idx_routes_shape'), table_name='routes', postgresql_using='gist')
    op.drop_constraint(op.f('routes_route_id_key'), 'routes', type_='unique')
    op.drop_constraint(op.f('routes_route_id_key1'), 'routes', type_='unique')
    op.create_foreign_key(None, 'routes', 'countries', ['country_id'], ['country_id'])
    op.drop_column('routes', 'shape')
    op.drop_column('routes', 'id')
    op.drop_column('routes', 'name')
    op.add_column('stops', sa.Column('country_id', sa.UUID(), nullable=False))
    op.add_column('stops', sa.Column('code', sa.Text(), nullable=True))
    op.add_column('stops', sa.Column('zone_id', sa.Text(), nullable=True))
    op.add_column('stops', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('stops', 'stop_id',
               existing_type=sa.VARCHAR(),
               server_default=sa.text('gen_random_uuid()'),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('stops', 'name',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               nullable=False)
    op.alter_column('stops', 'location',
               existing_type=geoalchemy2.types.Geometry(geometry_type='POINT', dimension=2, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True),
               type_=geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry', nullable=False),
               nullable=False)
    op.drop_constraint(op.f('stops_stop_id_key'), 'stops', type_='unique')
    op.create_foreign_key(None, 'stops', 'countries', ['country_id'], ['country_id'])
    op.drop_column('stops', 'id')
    op.add_column('timetables', sa.Column('timetable_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False))
    op.add_column('timetables', sa.Column('arrival_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('timetables', sa.Column('notes', sa.Text(), nullable=True))
    op.add_column('timetables', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('timetables', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('timetables', 'vehicle_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('timetables', 'route_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('timetables', 'departure_time',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_column('timetables', 'id')
    op.add_column('vehicles', sa.Column('country_id', sa.UUID(), nullable=False))
    op.add_column('vehicles', sa.Column('reg_code', sa.Text(), nullable=False))
    op.add_column('vehicles', sa.Column('home_depot_id', sa.UUID(), nullable=True))
    op.add_column('vehicles', sa.Column('preferred_route_id', sa.UUID(), nullable=True))
    op.add_column('vehicles', sa.Column('profile_id', sa.Text(), nullable=True))
    op.add_column('vehicles', sa.Column('notes', sa.Text(), nullable=True))
    op.add_column('vehicles', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('vehicles', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('vehicles', 'vehicle_id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('vehicles', 'status',
               existing_type=sa.VARCHAR(),
               server_default=None,
               type_=sa.Enum('available', 'in_service', 'maintenance', 'retired', name='vehiclestatusenum'),
               nullable=False)
    op.drop_constraint(op.f('vehicles_vehicle_id_key'), 'vehicles', type_='unique')
    op.drop_constraint(op.f('vehicles_route_id_fkey'), 'vehicles', type_='foreignkey')
    op.create_foreign_key(None, 'vehicles', 'depots', ['home_depot_id'], ['depot_id'])
    op.create_foreign_key(None, 'vehicles', 'countries', ['country_id'], ['country_id'])
    op.create_foreign_key(None, 'vehicles', 'routes', ['preferred_route_id'], ['route_id'])
    op.drop_column('vehicles', 'route_id')
    op.drop_column('vehicles', 'id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vehicles', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('vehicles', sa.Column('route_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'vehicles', type_='foreignkey')
    op.drop_constraint(None, 'vehicles', type_='foreignkey')
    op.drop_constraint(None, 'vehicles', type_='foreignkey')
    op.create_foreign_key(op.f('vehicles_route_id_fkey'), 'vehicles', 'routes', ['route_id'], ['route_id'])
    op.create_unique_constraint(op.f('vehicles_vehicle_id_key'), 'vehicles', ['vehicle_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('vehicles', 'status',
               existing_type=sa.Enum('available', 'in_service', 'maintenance', 'retired', name='vehiclestatusenum'),
               server_default=sa.text("'available'::vehicle_status"),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('vehicles', 'vehicle_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('vehicles', 'updated_at')
    op.drop_column('vehicles', 'created_at')
    op.drop_column('vehicles', 'notes')
    op.drop_column('vehicles', 'profile_id')
    op.drop_column('vehicles', 'preferred_route_id')
    op.drop_column('vehicles', 'home_depot_id')
    op.drop_column('vehicles', 'reg_code')
    op.drop_column('vehicles', 'country_id')
    op.add_column('timetables', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.alter_column('timetables', 'departure_time',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('timetables', 'route_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('timetables', 'vehicle_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               nullable=True)
    op.drop_column('timetables', 'updated_at')
    op.drop_column('timetables', 'created_at')
    op.drop_column('timetables', 'notes')
    op.drop_column('timetables', 'arrival_time')
    op.drop_column('timetables', 'timetable_id')
    op.add_column('stops', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'stops', type_='foreignkey')
    op.create_unique_constraint(op.f('stops_stop_id_key'), 'stops', ['stop_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('stops', 'location',
               existing_type=geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeomFromEWKT', name='geometry', nullable=False),
               type_=geoalchemy2.types.Geometry(geometry_type='POINT', dimension=2, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True),
               nullable=True)
    op.alter_column('stops', 'name',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('stops', 'stop_id',
               existing_type=sa.UUID(),
               server_default=None,
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('stops', 'created_at')
    op.drop_column('stops', 'zone_id')
    op.drop_column('stops', 'code')
    op.drop_column('stops', 'country_id')
    op.add_column('routes', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('routes', sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('routes_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.add_column('routes', sa.Column('shape', geoalchemy2.types.Geometry(geometry_type='LINESTRING', dimension=2, from_text='ST_GeomFromEWKT', name='geometry', _spatial_index_reflected=True), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'routes', type_='foreignkey')
    op.create_unique_constraint(op.f('routes_route_id_key1'), 'routes', ['route_id'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('routes_route_id_key'), 'routes', ['route_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_routes_shape'), 'routes', ['shape'], unique=False, postgresql_using='gist')
    op.alter_column('routes', 'route_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('routes', 'updated_at')
    op.drop_column('routes', 'created_at')
    op.drop_column('routes', 'valid_to')
    op.drop_column('routes', 'valid_from')
    op.drop_column('routes', 'is_active')
    op.drop_column('routes', 'parishes')
    op.drop_column('routes', 'long_name')
    op.drop_column('routes', 'short_name')
    op.drop_column('routes', 'country_id')
    op.create_table('route_stops',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('route_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('stop_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sequence', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('arrival_offset', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['route_id'], ['routes.route_id'], name=op.f('route_stops_route_id_fkey')),
    sa.ForeignKeyConstraint(['stop_id'], ['stops.stop_id'], name=op.f('route_stops_stop_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('route_stops_pkey'))
    )
    op.drop_table('stop_times')
    op.drop_table('block_trips')
    op.drop_table('vehicle_status_events')
    op.drop_table('vehicle_assignments')
    op.drop_table('trips')
    op.drop_table('driver_assignments')
    op.drop_table('block_breaks')
    op.drop_table('route_shapes')
    op.drop_table('frequencies')
    op.drop_table('drivers')
    op.drop_table('blocks')
    op.drop_table('services')
    op.drop_index('idx_depots_location', table_name='depots', postgresql_using='gist')
    op.drop_table('depots')
    op.drop_index('idx_shapes_geom', table_name='shapes', postgresql_using='gist')
    op.drop_table('shapes')
    op.drop_table('countries')
    # ### end Alembic commands ###
